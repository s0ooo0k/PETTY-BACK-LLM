name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main, feat/prod ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          set -e
          echo "Gradle 빌드를 시작합니다..."
          ./gradlew build -x test
          echo "Gradle 빌드 성공!"

      - name: Create deployment package
        if: github.event_name == 'push'
        run: |
          mkdir -p deploy
          if ls build/libs/*.jar 1> /dev/null 2>&1; then
            cp build/libs/*.jar deploy/petty-app.jar
            echo "JAR 파일 복사 완료"
          else
            echo "JAR 파일이 존재하지 않습니다. 배포 중단"
            exit 1
          fi

      - name: Deploy to Oracle Cloud
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            sudo systemctl stop petty-app || true
            if [ -f /home/ubuntu/petty-app/app/petty-app.jar ]; then
              cp /home/ubuntu/petty-app/app/petty-app.jar /home/ubuntu/petty-app/app/petty-app.jar.backup
            fi
            echo "새 JAR 파일 복사를 기다리는 중..."

      - name: Copy JAR file
        if: github.event_name == 'push'
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "deploy/petty-app.jar"
          target: "/home/ubuntu/petty-app/app/"
          strip_components: 1

      - name: Start application
        if: github.event_name == 'push'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 환경 변수 파일 업데이트
            cat > /home/ubuntu/petty-app/.env << 'EOF'
            # Database
            DB_SUPABASE_URL=${{ secrets.DB_SUPABASE_URL }}
            DB_SUPABASE_USERNAME=${{ secrets.DB_SUPABASE_USERNAME }}
            DB_SUPABASE_PASSWORD=${{ secrets.DB_SUPABASE_PASSWORD }}
            DB_AIVEN_URL=${{ secrets.DB_AIVEN_URL }}
            DB_AIVEN_USERNAME=${{ secrets.DB_AIVEN_USERNAME }}
            DB_AIVEN_PASSWORD=${{ secrets.DB_AIVEN_PASSWORD }}

            # JWT
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION_TIME=3600000

            # OAuth
            OAUTH_GITHUB_CLIENT_ID=${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
            OAUTH_GITHUB_CLIENT_SECRET=${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
            OAUTH_KAKAO_CLIENT_ID=${{ secrets.OAUTH_KAKAO_CLIENT_ID }}
            OAUTH_KAKAO_CLIENT_SECRET=${{ secrets.OAUTH_KAKAO_CLIENT_SECRET }}
            OAUTH_KAKAO_REDIRECT_URI=${{ secrets.OAUTH_KAKAO_REDIRECT_URI }}

            # Email
            EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}

            # AWS
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            # Supabase
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}

            # OpenAI
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            # Qdrant
            QDRANT_HOST=${{ secrets.QDRANT_HOST }}
            QDRANT_PORT=${{ secrets.QDRANT_PORT }}
            QDRANT_COLLECTION=${{ secrets.QDRANT_COLLECTION }}
            QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}

            # Vision APIs
            GEMINI_VISION_URL=${{ secrets.GEMINI_VISION_URL }}
            GEMINI_VISION_KEY=${{ secrets.GEMINI_VISION_KEY }}
            TOGETHER_VISION_URL=${{ secrets.TOGETHER_VISION_URL }}
            TOGETHER_VISION_KEY=${{ secrets.TOGETHER_VISION_KEY }}

            # Chat APIs
            GEMINI_CHAT_URL=${{ secrets.GEMINI_CHAT_URL }}
            GEMINI_CHAT_KEY=${{ secrets.GEMINI_CHAT_KEY }}
            TOGETHER_CHAT_MODEL=${{ secrets.TOGETHER_CHAT_MODEL }}
            TOGETHER_CHAT_URL=${{ secrets.TOGETHER_CHAT_URL }}
            TOGETHER_CHAT_KEY=${{ secrets.TOGETHER_CHAT_KEY }}

            # Tour API
            TOUR_API_BASE_URL=${{ secrets.TOUR_API_BASE_URL }}
            TOUR_API_SERVICE_KEY=${{ secrets.TOUR_API_SERVICE_KEY }}
            TOUR_API_MOBILE_OS=${{ secrets.TOUR_API_MOBILE_OS }}
            TOUR_API_MOBILE_APP=${{ secrets.TOUR_API_MOBILE_APP }}
            TOUR_API_TYPE=${{ secrets.TOUR_API_TYPE }}
            EOF

            chmod 600 /home/ubuntu/petty-app/.env

            # 서비스 실행
            sudo systemctl start petty-app
            echo "서비스 시작 완료. 상태 확인 중..."
            
            # 더 정확한 상태 확인 (60초 대기)
            sleep 60
            
            # 1. 정확한 서비스 상태 확인
            status=$(sudo systemctl is-active petty-app)
            echo "서비스 상태: $status"
            
            if [ "$status" != "active" ]; then
              echo "❌ 서비스가 정상적으로 실행되지 않았습니다."
              echo "=== 서비스 상태 ==="
              sudo systemctl status petty-app --no-pager
              echo "=== 최근 로그 ==="
              sudo journalctl -u petty-app -n 20 --no-pager
              exit 1
            fi
            
            # 2. 에러 로그 확인
            if sudo journalctl -u petty-app -n 20 | grep -i "error\|exception\|failed"; then
              echo "❌ 애플리케이션 로그에서 에러가 발견되었습니다."
              echo "=== 에러 로그 ==="
              sudo journalctl -u petty-app -n 50 --no-pager
              exit 1
            fi
            
            # 3. 추가 안정성 체크 (30초 더 대기 후 재확인)
            echo "추가 안정성 확인 중..."
            sleep 35
            
            final_status=$(sudo systemctl is-active petty-app)
            if [ "$final_status" != "active" ]; then
              echo "❌ 서비스가 불안정합니다. 최종 상태: $final_status"
              sudo systemctl status petty-app --no-pager
              sudo journalctl -u petty-app -n 30 --no-pager
              exit 1
            fi
            
            # 4. 프로세스 실제 실행 확인
            if ! pgrep -f "petty-app.jar" > /dev/null; then
              echo "❌ petty-app.jar 프로세스가 실행되지 않았습니다."
              ps aux | grep java
              exit 1
            fi
            
            echo "✅ 배포가 성공적으로 완료되었습니다!"
            echo "=== 최종 상태 ==="
            sudo systemctl status petty-app --no-pager
            echo "=== 실행 중인 Java 프로세스 ==="
            ps aux | grep java | grep -v grep